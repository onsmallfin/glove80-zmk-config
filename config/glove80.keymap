
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* On demand includes */
#include <dt-bindings/zmk/pointing.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_symbol 1
#define LAYER_Lower 2
#define LAYER_Magic 3
#define LAYER_colemak 4
#define LAYER_aries 5

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {
behaviors {
         
        question: english_question {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(KP_N7)>, <&kp LS(MINUS)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&caret>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };
        Nsix: no_6 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&caret>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/* Automatically generated macro definitions */
/ {
    macros {
    
        caret: caret {
            label = "&CARET";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N6)>
                , <&kp LS(N6)>;
        };
    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {

        HT_MO_L: HT_MO_L {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            bindings = <&mo>, <&kp>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            retro-tap;
            hold-trigger-key-positions = <28 16 5 17 18 6 7 19 31 29 30 42 41 40 58 59 61 60 76 75 77 43 44 32 20 8 9 21 33 45 63 62 78 79 57 56 55 72 73 74>;
        };

        CTRL: CTRL {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <0>;
            hold-trigger-key-positions = <>;
        };

        HT_KP_L: HT_KP_L {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <28 16 5 17 18 6 7 19 31 29 30 42 41 40 58 59 61 60 76 75 77 43 44 32 20 8 9 21 33 45 63 62 78 79 57 56 55 72 73 74>;
        };

        HT_MO_R: HT_MO_R {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <140>;
            bindings = <&mo>, <&kp>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <1 11 10 0 23 22 34 35 46 47 65 64 66 48 36 24 12 2 3 13 4 14 15 27 26 25 37 38 39 51 50 49 67 68 52 69 70 53 54 71>;
        };

        HT_KP_R: HT_KP_R {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <0 1 11 10 23 22 34 35 46 64 65 47 66 36 48 24 12 2 3 4 14 13 25 26 38 37 49 68 67 50 51 39 27 15 52 69 70 53 54 71>;
        };

        umlaut: umlaut {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <400>;
            hold-trigger-key-positions = <>;
        };
    };
};

/* Automatically generated combos definitions */


/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
               &kp F1           &kp F2   &kp F3           &kp F4        &kp F5                                                                                                    &kp F6     &kp F7           &kp F8           &kp F9      &kp F10
            &kp EQUAL           &kp N1   &kp N2           &kp N3        &kp N4  &kp N5                                                                            &Nsix           &kp N7     &kp N8           &kp N9           &kp N0    &kp MINUS
              &kp TAB            &kp Q    &kp W            &kp E         &kp R   &kp T                                                                            &kp Y  &umlaut RA(Y) U      &kp I  &umlaut RA(P) O            &kp P     &kp BSLH
              &kp ESC  &umlaut RA(Q) A    &kp S  &HT_KP_L LGUI D  &HT_MO_L 1 F   &kp G                                                                  &HT_KP_R RGUI H     &HT_MO_R 1 J      &kp K            &kp L         &kp SEMI  &kp RA(SQT)
            &kp GRAVE            &kp Z    &kp X            &kp C         &kp V   &kp B  &kp LSHFT  &kp LCTRL    &lower  &kp LGUI  &kp RCTRL  &kp RSHFT            &kp N            &kp M  &kp COMMA          &kp DOT         &kp FSLH    &kp PG_UP
 &magic LAYER_Magic 0         &kp HOME  &kp END         &kp LEFT     &kp RIGHT           &kp BSPC    &kp DEL  &kp LALT  &kp RALT    &kp RET  &kp SPACE                            &kp UP   &kp DOWN         &kp LBKT  &kp NON_US_BSLH    &kp PG_DN
            >;
        };

        layer_symbol {
            bindings = <
  &none      &none      &none         &none          &none                                                                                                         &none          &none   &none     &none   &none
  &none      &none     &trans        &trans         &trans  &trans                                                                               &kp LS(N6)        &none          &none   &none     &none   &none
  &none     &trans     &trans        &trans       &kp BSLH  &trans                                                                                    &none     &kp LBKT       &kp RBKT   &none     &none   &none
  &none  &kp LC(C)  &kp LC(V)  &kp LS(LBKT)   &kp LS(RBKT)  &trans                                                                                &kp EQUAL  &kp KP_LPAR    &kp KP_RPAR   &none  &kp BSLH   &none
  &none     &trans     &trans   &kp RA(SQT)  &kp RA(GRAVE)  &trans     &kp LSHFT           &none   &none   &none         &none        &trans  &kp LS(MINUS)    &kp MINUS  &kp LS(EQUAL)   &none     &none   &none
  &none     &trans     &trans        &trans         &trans          &msc SCRL_UP  &msc SCRL_DOWN   &none   &none  &kp LS(LBKT)  &kp LS(RBKT)                       &none          &none   &none     &none   &none
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
               &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
               &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
               &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
               &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
 &magic LAYER_Magic 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none           &tog 0            &none            &none           &tog 4           &tog 5                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &to 0            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        layer_colemak {
            bindings = <
               &kp F1    &kp F2   &kp F3    &kp F4        &kp F5                                                                                &kp F6     &kp F7    &kp F8    &kp F9    &kp F10
            &kp EQUAL    &kp N1   &kp N2    &kp N3        &kp N4  &kp N5                                                                &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
              &kp TAB     &kp Q    &kp W     &kp F         &kp P   &kp G                                                                 &kp J   &kp L      &kp U     &kp Y  &kp SEMI   &kp BSLH
              &kp ESC     &kp A    &kp R     &kp S  &HT_MO_L 1 T   &kp D                                                                 &kp H   &kp N      &kp E     &kp I     &kp O    &kp SQT
            &kp GRAVE     &kp Z    &kp X     &kp C         &kp V   &kp B  &kp LSHFT  &kp LCTRL  &lower  &kp LGUI  &kp RCTRL  &kp RSHFT   &kp K   &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp PG_UP
 &magic LAYER_Magic 0  &kp HOME  &kp END  &kp LEFT     &kp RIGHT           &kp BSPC    &kp DEL   &to 0    &tog 0    &kp RET  &kp SPACE          &kp UP   &kp DOWN  &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

        layer_aries {
            bindings = <
               &kp F1           &kp F2           &kp F3           &kp F4        &kp F5                                                                                 &kp F6    &kp F7    &kp F8    &kp F9    &kp F10
            &kp EQUAL           &kp N1           &kp N2           &kp N3        &kp N4  &kp N5                                                                  &Nsix  &kp N7    &kp N8    &kp N9    &kp N0  &kp MINUS
              &kp TAB            &kp X         &kp SEMI  &umlaut RA(Y) U         &kp P   &kp B                                                                  &kp V   &kp M     &kp C     &kp Q     &kp K   &kp BSLH
              &kp ESC  &umlaut RA(P) O  &umlaut RA(Q) A  &HT_KP_L LGUI I  &HT_MO_L 1 N   &kp H                                                                  &kp L   &kp T     &kp S     &kp R     &kp D    &kp SQT
            &kp GRAVE      &kp RA(SQT)        &kp COMMA            &kp Y         &kp F   &kp Z  &kp LSHFT  &kp LCTRL   &lower  &kp LGUI  &kp RCTRL  &kp RSHFT   &kp J   &kp G     &kp W   &kp DOT  &kp FSLH  &kp PG_UP
 &magic LAYER_Magic 0         &kp HOME          &kp END         &kp LEFT     &kp RIGHT              &kp E   &kp BSPC  &kp DEL    &tog 0    &kp RET  &kp SPACE          &kp UP  &kp DOWN  &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

    };
};
